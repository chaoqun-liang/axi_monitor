// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module slv_guard_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 5
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output slv_guard_reg_pkg::slv_guard_reg2hw_t reg2hw, // Write
  input  slv_guard_reg_pkg::slv_guard_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import slv_guard_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic guard_enable_wd;
  logic guard_enable_we;
  logic [3:0] budget_write_wd;
  logic budget_write_we;
  logic [3:0] budget_read_wd;
  logic budget_read_we;
  logic reset_qs;
  logic irq_irq_qs;
  logic irq_wr_timeout_qs;
  logic irq_rd_timeout_qs;
  logic irq_unwanted_wr_resp_qs;
  logic irq_unwanted_rd_resp_qs;
  logic [4:0] irq_txn_id_qs;
  logic [31:0] irq_addr_qs;
  logic [7:0] latency_write_qs;
  logic [7:0] latency_read_qs;

  // Register instances
  // R[guard_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_guard_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (guard_enable_we),
    .wd     (guard_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.guard_enable.q ),

    .qs     ()
  );


  // R[budget_write]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("WO"),
    .RESVAL  (4'h0)
  ) u_budget_write (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (budget_write_we),
    .wd     (budget_write_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.budget_write.q ),

    .qs     ()
  );


  // R[budget_read]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("WO"),
    .RESVAL  (4'h0)
  ) u_budget_read (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (budget_read_we),
    .wd     (budget_read_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.budget_read.q ),

    .qs     ()
  );


  // R[reset]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_reset (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.reset.de),
    .d      (hw2reg.reset.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reset_qs)
  );


  // R[irq]: V(False)

  //   F[irq]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_irq_irq (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq.irq.de),
    .d      (hw2reg.irq.irq.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_irq_qs)
  );


  //   F[wr_timeout]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_irq_wr_timeout (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq.wr_timeout.de),
    .d      (hw2reg.irq.wr_timeout.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_wr_timeout_qs)
  );


  //   F[rd_timeout]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_irq_rd_timeout (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq.rd_timeout.de),
    .d      (hw2reg.irq.rd_timeout.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_rd_timeout_qs)
  );


  //   F[unwanted_wr_resp]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_irq_unwanted_wr_resp (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq.unwanted_wr_resp.de),
    .d      (hw2reg.irq.unwanted_wr_resp.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_unwanted_wr_resp_qs)
  );


  //   F[unwanted_rd_resp]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_irq_unwanted_rd_resp (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq.unwanted_rd_resp.de),
    .d      (hw2reg.irq.unwanted_rd_resp.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_unwanted_rd_resp_qs)
  );


  //   F[txn_id]: 9:5
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RO"),
    .RESVAL  (5'h0)
  ) u_irq_txn_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq.txn_id.de),
    .d      (hw2reg.irq.txn_id.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_txn_id_qs)
  );


  // R[irq_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_irq_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.irq_addr.de),
    .d      (hw2reg.irq_addr.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (irq_addr_qs)
  );


  // R[latency_write]: V(False)

  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_latency_write (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.latency_write.de),
    .d      (hw2reg.latency_write.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (latency_write_qs)
  );


  // R[latency_read]: V(False)

  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_latency_read (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.latency_read.de),
    .d      (hw2reg.latency_read.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (latency_read_qs)
  );




  logic [7:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == SLV_GUARD_GUARD_ENABLE_OFFSET);
    addr_hit[1] = (reg_addr == SLV_GUARD_BUDGET_WRITE_OFFSET);
    addr_hit[2] = (reg_addr == SLV_GUARD_BUDGET_READ_OFFSET);
    addr_hit[3] = (reg_addr == SLV_GUARD_RESET_OFFSET);
    addr_hit[4] = (reg_addr == SLV_GUARD_IRQ_OFFSET);
    addr_hit[5] = (reg_addr == SLV_GUARD_IRQ_ADDR_OFFSET);
    addr_hit[6] = (reg_addr == SLV_GUARD_LATENCY_WRITE_OFFSET);
    addr_hit[7] = (reg_addr == SLV_GUARD_LATENCY_READ_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(SLV_GUARD_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(SLV_GUARD_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(SLV_GUARD_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(SLV_GUARD_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(SLV_GUARD_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(SLV_GUARD_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(SLV_GUARD_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(SLV_GUARD_PERMIT[7] & ~reg_be)))));
  end

  assign guard_enable_we = addr_hit[0] & reg_we & !reg_error;
  assign guard_enable_wd = reg_wdata[0];

  assign budget_write_we = addr_hit[1] & reg_we & !reg_error;
  assign budget_write_wd = reg_wdata[3:0];

  assign budget_read_we = addr_hit[2] & reg_we & !reg_error;
  assign budget_read_wd = reg_wdata[3:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[3:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[3:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = reset_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = irq_irq_qs;
        reg_rdata_next[1] = irq_wr_timeout_qs;
        reg_rdata_next[2] = irq_rd_timeout_qs;
        reg_rdata_next[3] = irq_unwanted_wr_resp_qs;
        reg_rdata_next[4] = irq_unwanted_rd_resp_qs;
        reg_rdata_next[9:5] = irq_txn_id_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = irq_addr_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = latency_write_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[7:0] = latency_read_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module slv_guard_reg_top_intf
#(
  parameter int AW = 5,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output slv_guard_reg_pkg::slv_guard_reg2hw_t reg2hw, // Write
  input  slv_guard_reg_pkg::slv_guard_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  slv_guard_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


