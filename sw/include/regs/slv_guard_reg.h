// Generated register defines for slv_guard

// Copyright information found in source file:
// Copyright 2024 ETH Zurich and University of Bologna.

// Licensing information found in source file:
// Licensed under Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

#ifndef _SLV_GUARD_REG_DEFS_
#define _SLV_GUARD_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Register width
#define SLV_GUARD_PARAM_REG_WIDTH 32

// Enable slave guard feature
#define SLV_GUARD_GUARD_ENABLE_REG_OFFSET 0x0
#define SLV_GUARD_GUARD_ENABLE_ENABLE_BIT 0

// time budget from awvld to awrdy
#define SLV_GUARD_BUDGET_AWVLD_AWRDY_REG_OFFSET 0x4
#define SLV_GUARD_BUDGET_AWVLD_AWRDY_BUDGET_AWVLD_AWRDY_MASK 0xf
#define SLV_GUARD_BUDGET_AWVLD_AWRDY_BUDGET_AWVLD_AWRDY_OFFSET 0
#define SLV_GUARD_BUDGET_AWVLD_AWRDY_BUDGET_AWVLD_AWRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_BUDGET_AWVLD_AWRDY_BUDGET_AWVLD_AWRDY_MASK, .index = SLV_GUARD_BUDGET_AWVLD_AWRDY_BUDGET_AWVLD_AWRDY_OFFSET })

// time budget for unit length on w channel
#define SLV_GUARD_UNIT_BUDGET_W_REG_OFFSET 0x8
#define SLV_GUARD_UNIT_BUDGET_W_UNIT_BUDGET_W_MASK 0xf
#define SLV_GUARD_UNIT_BUDGET_W_UNIT_BUDGET_W_OFFSET 0
#define SLV_GUARD_UNIT_BUDGET_W_UNIT_BUDGET_W_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_UNIT_BUDGET_W_UNIT_BUDGET_W_MASK, .index = SLV_GUARD_UNIT_BUDGET_W_UNIT_BUDGET_W_OFFSET })

// time budget from wvld to wrdy
#define SLV_GUARD_BUDGET_WVLD_WRDY_REG_OFFSET 0xc
#define SLV_GUARD_BUDGET_WVLD_WRDY_BUDGET_WVLD_WRDY_MASK 0xf
#define SLV_GUARD_BUDGET_WVLD_WRDY_BUDGET_WVLD_WRDY_OFFSET 0
#define SLV_GUARD_BUDGET_WVLD_WRDY_BUDGET_WVLD_WRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_BUDGET_WVLD_WRDY_BUDGET_WVLD_WRDY_MASK, .index = SLV_GUARD_BUDGET_WVLD_WRDY_BUDGET_WVLD_WRDY_OFFSET })

// time budget from wlast to bvld
#define SLV_GUARD_BUDGET_WLAST_BVLD_REG_OFFSET 0x10
#define SLV_GUARD_BUDGET_WLAST_BVLD_BUDGET_WLAST_BVLD_MASK 0xf
#define SLV_GUARD_BUDGET_WLAST_BVLD_BUDGET_WLAST_BVLD_OFFSET 0
#define SLV_GUARD_BUDGET_WLAST_BVLD_BUDGET_WLAST_BVLD_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_BUDGET_WLAST_BVLD_BUDGET_WLAST_BVLD_MASK, .index = SLV_GUARD_BUDGET_WLAST_BVLD_BUDGET_WLAST_BVLD_OFFSET })

// time budget from bvld to brdy
#define SLV_GUARD_BUDGET_BVLD_BRDY_REG_OFFSET 0x14
#define SLV_GUARD_BUDGET_BVLD_BRDY_BUDGET_BVLD_BRDY_MASK 0xf
#define SLV_GUARD_BUDGET_BVLD_BRDY_BUDGET_BVLD_BRDY_OFFSET 0
#define SLV_GUARD_BUDGET_BVLD_BRDY_BUDGET_BVLD_BRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_BUDGET_BVLD_BRDY_BUDGET_BVLD_BRDY_MASK, .index = SLV_GUARD_BUDGET_BVLD_BRDY_BUDGET_BVLD_BRDY_OFFSET })

// time budget from arvld to arrdy
#define SLV_GUARD_BUDGET_ARVLD_ARRDY_REG_OFFSET 0x18
#define SLV_GUARD_BUDGET_ARVLD_ARRDY_BUDGET_ARVLD_ARRDY_MASK 0xf
#define SLV_GUARD_BUDGET_ARVLD_ARRDY_BUDGET_ARVLD_ARRDY_OFFSET 0
#define SLV_GUARD_BUDGET_ARVLD_ARRDY_BUDGET_ARVLD_ARRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_BUDGET_ARVLD_ARRDY_BUDGET_ARVLD_ARRDY_MASK, .index = SLV_GUARD_BUDGET_ARVLD_ARRDY_BUDGET_ARVLD_ARRDY_OFFSET })

// time budget for unit length on r channel
#define SLV_GUARD_UNIT_BUDGET_R_REG_OFFSET 0x1c
#define SLV_GUARD_UNIT_BUDGET_R_UNIT_BUDGET_R_MASK 0xf
#define SLV_GUARD_UNIT_BUDGET_R_UNIT_BUDGET_R_OFFSET 0
#define SLV_GUARD_UNIT_BUDGET_R_UNIT_BUDGET_R_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_UNIT_BUDGET_R_UNIT_BUDGET_R_MASK, .index = SLV_GUARD_UNIT_BUDGET_R_UNIT_BUDGET_R_OFFSET })

// time budget from rvld to rrdy
#define SLV_GUARD_BUDGET_RVLD_RRDY_REG_OFFSET 0x20
#define SLV_GUARD_BUDGET_RVLD_RRDY_BUDGET_RVLD_RRDY_MASK 0xf
#define SLV_GUARD_BUDGET_RVLD_RRDY_BUDGET_RVLD_RRDY_OFFSET 0
#define SLV_GUARD_BUDGET_RVLD_RRDY_BUDGET_RVLD_RRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_BUDGET_RVLD_RRDY_BUDGET_RVLD_RRDY_MASK, .index = SLV_GUARD_BUDGET_RVLD_RRDY_BUDGET_RVLD_RRDY_OFFSET })

// Is the interface requested to be reset?
#define SLV_GUARD_RESET_REG_OFFSET 0x24
#define SLV_GUARD_RESET_RESET_BIT 0

// interrpt cause and clear
#define SLV_GUARD_IRQ_REG_OFFSET 0x28
#define SLV_GUARD_IRQ_W0_BIT 0
#define SLV_GUARD_IRQ_W1_BIT 1
#define SLV_GUARD_IRQ_W2_BIT 2
#define SLV_GUARD_IRQ_W3_BIT 3
#define SLV_GUARD_IRQ_W4_BIT 4
#define SLV_GUARD_IRQ_W5_BIT 5
#define SLV_GUARD_IRQ_R0_BIT 6
#define SLV_GUARD_IRQ_R1_BIT 7
#define SLV_GUARD_IRQ_R2_BIT 8
#define SLV_GUARD_IRQ_R3_BIT 9
#define SLV_GUARD_IRQ_MIS_ID_WR_BIT 10
#define SLV_GUARD_IRQ_MIS_ID_RD_BIT 11
#define SLV_GUARD_IRQ_UNWANTED_TXN_BIT 12
#define SLV_GUARD_IRQ_TXN_ID_MASK 0xfff
#define SLV_GUARD_IRQ_TXN_ID_OFFSET 13
#define SLV_GUARD_IRQ_TXN_ID_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_IRQ_TXN_ID_MASK, .index = SLV_GUARD_IRQ_TXN_ID_OFFSET })

// address of the transaction going wrong
#define SLV_GUARD_IRQ_ADDR_REG_OFFSET 0x2c

// letency from awvld to awrdy
#define SLV_GUARD_LATENCY_AWVLD_AWRDY_REG_OFFSET 0x30
#define SLV_GUARD_LATENCY_AWVLD_AWRDY_LATENCY_AWVLD_AWRDY_MASK 0x3ff
#define SLV_GUARD_LATENCY_AWVLD_AWRDY_LATENCY_AWVLD_AWRDY_OFFSET 0
#define SLV_GUARD_LATENCY_AWVLD_AWRDY_LATENCY_AWVLD_AWRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_AWVLD_AWRDY_LATENCY_AWVLD_AWRDY_MASK, .index = SLV_GUARD_LATENCY_AWVLD_AWRDY_LATENCY_AWVLD_AWRDY_OFFSET })

// latency from awvld to wfirst
#define SLV_GUARD_LATENCY_AWVLD_WFIRST_REG_OFFSET 0x34
#define SLV_GUARD_LATENCY_AWVLD_WFIRST_LATENCY_AWVLD_WFIRST_MASK 0x3ff
#define SLV_GUARD_LATENCY_AWVLD_WFIRST_LATENCY_AWVLD_WFIRST_OFFSET 0
#define SLV_GUARD_LATENCY_AWVLD_WFIRST_LATENCY_AWVLD_WFIRST_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_AWVLD_WFIRST_LATENCY_AWVLD_WFIRST_MASK, .index = SLV_GUARD_LATENCY_AWVLD_WFIRST_LATENCY_AWVLD_WFIRST_OFFSET })

// latency from wvld to wrdy
#define SLV_GUARD_LATENCY_WVLD_WRDY_REG_OFFSET 0x38
#define SLV_GUARD_LATENCY_WVLD_WRDY_LATENCY_WVLD_WRDY_MASK 0x3ff
#define SLV_GUARD_LATENCY_WVLD_WRDY_LATENCY_WVLD_WRDY_OFFSET 0
#define SLV_GUARD_LATENCY_WVLD_WRDY_LATENCY_WVLD_WRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_WVLD_WRDY_LATENCY_WVLD_WRDY_MASK, .index = SLV_GUARD_LATENCY_WVLD_WRDY_LATENCY_WVLD_WRDY_OFFSET })

// latency from wvld to wlast
#define SLV_GUARD_LATENCY_WVLD_WLAST_REG_OFFSET 0x3c
#define SLV_GUARD_LATENCY_WVLD_WLAST_LATENCY_WVLD_WLAST_MASK 0x3ff
#define SLV_GUARD_LATENCY_WVLD_WLAST_LATENCY_WVLD_WLAST_OFFSET 0
#define SLV_GUARD_LATENCY_WVLD_WLAST_LATENCY_WVLD_WLAST_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_WVLD_WLAST_LATENCY_WVLD_WLAST_MASK, .index = SLV_GUARD_LATENCY_WVLD_WLAST_LATENCY_WVLD_WLAST_OFFSET })

// latency from wlast to bvld
#define SLV_GUARD_LATENCY_WLAST_BVLD_REG_OFFSET 0x40
#define SLV_GUARD_LATENCY_WLAST_BVLD_LATENCY_WLAST_BVLD_MASK 0x3ff
#define SLV_GUARD_LATENCY_WLAST_BVLD_LATENCY_WLAST_BVLD_OFFSET 0
#define SLV_GUARD_LATENCY_WLAST_BVLD_LATENCY_WLAST_BVLD_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_WLAST_BVLD_LATENCY_WLAST_BVLD_MASK, .index = SLV_GUARD_LATENCY_WLAST_BVLD_LATENCY_WLAST_BVLD_OFFSET })

// latency from bvld to brdy
#define SLV_GUARD_LATENCY_BVLD_BRDY_REG_OFFSET 0x44
#define SLV_GUARD_LATENCY_BVLD_BRDY_LATENCY_WLAST_BRDY_MASK 0x3ff
#define SLV_GUARD_LATENCY_BVLD_BRDY_LATENCY_WLAST_BRDY_OFFSET 0
#define SLV_GUARD_LATENCY_BVLD_BRDY_LATENCY_WLAST_BRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_BVLD_BRDY_LATENCY_WLAST_BRDY_MASK, .index = SLV_GUARD_LATENCY_BVLD_BRDY_LATENCY_WLAST_BRDY_OFFSET })

// latency from arvld to arrdy
#define SLV_GUARD_LATENCY_ARVLD_ARRDY_REG_OFFSET 0x48
#define SLV_GUARD_LATENCY_ARVLD_ARRDY_LATENCY_ARVLD_ARRDY_MASK 0x3ff
#define SLV_GUARD_LATENCY_ARVLD_ARRDY_LATENCY_ARVLD_ARRDY_OFFSET 0
#define SLV_GUARD_LATENCY_ARVLD_ARRDY_LATENCY_ARVLD_ARRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_ARVLD_ARRDY_LATENCY_ARVLD_ARRDY_MASK, .index = SLV_GUARD_LATENCY_ARVLD_ARRDY_LATENCY_ARVLD_ARRDY_OFFSET })

// latency from arvld to rvld
#define SLV_GUARD_LATENCY_ARVLD_RVLD_REG_OFFSET 0x4c
#define SLV_GUARD_LATENCY_ARVLD_RVLD_LATENCY_ARVLD_RVLD_MASK 0x3ff
#define SLV_GUARD_LATENCY_ARVLD_RVLD_LATENCY_ARVLD_RVLD_OFFSET 0
#define SLV_GUARD_LATENCY_ARVLD_RVLD_LATENCY_ARVLD_RVLD_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_ARVLD_RVLD_LATENCY_ARVLD_RVLD_MASK, .index = SLV_GUARD_LATENCY_ARVLD_RVLD_LATENCY_ARVLD_RVLD_OFFSET })

// latency from rvld to rrdy
#define SLV_GUARD_LATENCY_RVLD_RRDY_REG_OFFSET 0x50
#define SLV_GUARD_LATENCY_RVLD_RRDY_LATENCY_RVLD_RRDY_MASK 0x3ff
#define SLV_GUARD_LATENCY_RVLD_RRDY_LATENCY_RVLD_RRDY_OFFSET 0
#define SLV_GUARD_LATENCY_RVLD_RRDY_LATENCY_RVLD_RRDY_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_RVLD_RRDY_LATENCY_RVLD_RRDY_MASK, .index = SLV_GUARD_LATENCY_RVLD_RRDY_LATENCY_RVLD_RRDY_OFFSET })

// latency from rvld to rlast
#define SLV_GUARD_LATENCY_RVLD_RLAST_REG_OFFSET 0x54
#define SLV_GUARD_LATENCY_RVLD_RLAST_LATENCY_RVLD_RLAST_MASK 0x3ff
#define SLV_GUARD_LATENCY_RVLD_RLAST_LATENCY_RVLD_RLAST_OFFSET 0
#define SLV_GUARD_LATENCY_RVLD_RLAST_LATENCY_RVLD_RLAST_FIELD \
  ((bitfield_field32_t) { .mask = SLV_GUARD_LATENCY_RVLD_RLAST_LATENCY_RVLD_RLAST_MASK, .index = SLV_GUARD_LATENCY_RVLD_RLAST_LATENCY_RVLD_RLAST_OFFSET })

#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _SLV_GUARD_REG_DEFS_
// End generated register defines for slv_guard